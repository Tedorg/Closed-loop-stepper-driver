/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     STM32F103.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     02. August 2017
 * @note     Generated by SVDConv V3.2.66 on Wednesday, 02.08.2017 15:22:35
 *           from File 'STM32F103.svd',
 *           last modified on Tuesday, 28.02.2017 16:44:22
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup STM32F103
  * @{
  */


#ifndef STM32F103_H
#define STM32F103_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  STM32F103 Specific Interrupt Numbers  ========================================== */
  WWDG_IRQn                 =   0,              /*!< 0  Window Watchdog interrupt                                              */
  PVD_IRQn                  =   1,              /*!< 1  PVD through EXTI line detection interrupt                              */
  TAMPER_IRQn               =   2,              /*!< 2  Tamper interrupt                                                       */
  RTC_IRQn                  =   3,              /*!< 3  RTC global interrupt                                                   */
  FLASH_IRQn                =   4,              /*!< 4  Flash global interrupt                                                 */
  RCC_IRQn                  =   5,              /*!< 5  RCC global interrupt                                                   */
  EXTI0_IRQn                =   6,              /*!< 6  EXTI Line0 interrupt                                                   */
  EXTI1_IRQn                =   7,              /*!< 7  EXTI Line1 interrupt                                                   */
  EXTI2_IRQn                =   8,              /*!< 8  EXTI Line2 interrupt                                                   */
  EXTI3_IRQn                =   9,              /*!< 9  EXTI Line3 interrupt                                                   */
  EXTI4_IRQn                =  10,              /*!< 10 EXTI Line4 interrupt                                                   */
  DMA1_Channel1_IRQn        =  11,              /*!< 11 DMA1 Channel1 global interrupt                                         */
  DMA1_Channel2_IRQn        =  12,              /*!< 12 DMA1 Channel2 global interrupt                                         */
  DMA1_Channel3_IRQn        =  13,              /*!< 13 DMA1 Channel3 global interrupt                                         */
  DMA1_Channel4_IRQn        =  14,              /*!< 14 DMA1 Channel4 global interrupt                                         */
  DMA1_Channel5_IRQn        =  15,              /*!< 15 DMA1 Channel5 global interrupt                                         */
  DMA1_Channel6_IRQn        =  16,              /*!< 16 DMA1 Channel6 global interrupt                                         */
  DMA1_Channel7_IRQn        =  17,              /*!< 17 DMA1 Channel7 global interrupt                                         */
  ADC1_2_IRQn               =  18,              /*!< 18 ADC1 and ADC2 global interrupt                                         */
  USB_HP_CAN_TX_IRQn        =  19,              /*!< 19 USB High Priority or CAN TX interrupts                                 */
  USB_LP_CAN_RX0_IRQn       =  20,              /*!< 20 USB Low Priority or CAN RX0 interrupts                                 */
  CAN_RX1_IRQn              =  21,              /*!< 21 CAN RX1 interrupt                                                      */
  CAN_SCE_IRQn              =  22,              /*!< 22 CAN SCE interrupt                                                      */
  EXTI9_5_IRQn              =  23,              /*!< 23 EXTI Line[9:5] interrupts                                              */
  TIM1_BRK_IRQn             =  24,              /*!< 24 TIM1 Break interrupt                                                   */
  TIM1_UP_IRQn              =  25,              /*!< 25 TIM1 Update interrupt                                                  */
  TIM1_TRG_COM_IRQn         =  26,              /*!< 26 TIM1 Trigger and Commutation interrupts                                */
  TIM1_CC_IRQn              =  27,              /*!< 27 TIM1 Capture Compare interrupt                                         */
  TIM2_IRQn                 =  28,              /*!< 28 TIM2 global interrupt                                                  */
  TIM3_IRQn                 =  29,              /*!< 29 TIM3 global interrupt                                                  */
  TIM4_IRQn                 =  30,              /*!< 30 TIM4 global interrupt                                                  */
  I2C1_EV_IRQn              =  31,              /*!< 31 I2C1 event interrupt                                                   */
  I2C1_ER_IRQn              =  32,              /*!< 32 I2C1 error interrupt                                                   */
  I2C2_EV_IRQn              =  33,              /*!< 33 I2C2 event interrupt                                                   */
  I2C2_ER_IRQn              =  34,              /*!< 34 I2C2 error interrupt                                                   */
  SPI1_IRQn                 =  35,              /*!< 35 SPI1 global interrupt                                                  */
  SPI2_IRQn                 =  36,              /*!< 36 SPI2 global interrupt                                                  */
  USART1_IRQn               =  37,              /*!< 37 USART1 global interrupt                                                */
  USART2_IRQn               =  38,              /*!< 38 USART2 global interrupt                                                */
  USART3_IRQn               =  39,              /*!< 39 USART3 global interrupt                                                */
  EXTI15_10_IRQn            =  40,              /*!< 40 EXTI Line[15:10] interrupts                                            */
  RTCAlarm_IRQn             =  41,              /*!< 41 RTC Alarms through EXTI line interrupt                                 */
  TIM8_BRK_IRQn             =  43,              /*!< 43 TIM8 Break interrupt                                                   */
  TIM8_UP_IRQn              =  44,              /*!< 44 TIM8 Update interrupt                                                  */
  TIM8_TRG_COM_IRQn         =  45,              /*!< 45 TIM8 Trigger and Commutation interrupts                                */
  TIM8_CC_IRQn              =  46,              /*!< 46 TIM8 Capture Compare interrupt                                         */
  ADC3_IRQn                 =  47,              /*!< 47 ADC3 global interrupt                                                  */
  FSMC_IRQn                 =  48,              /*!< 48 FSMC global interrupt                                                  */
  SDIO_IRQn                 =  49,              /*!< 49 SDIO global interrupt                                                  */
  TIM5_IRQn                 =  50,              /*!< 50 TIM5 global interrupt                                                  */
  SPI3_IRQn                 =  51,              /*!< 51 SPI3 global interrupt                                                  */
  UART4_IRQn                =  52,              /*!< 52 UART4 global interrupt                                                 */
  UART5_IRQn                =  53,              /*!< 53 UART5 global interrupt                                                 */
  TIM6_IRQn                 =  54,              /*!< 54 TIM6 global interrupt                                                  */
  TIM7_IRQn                 =  55,              /*!< 55 TIM7 global interrupt                                                  */
  DMA2_Channel1_IRQn        =  56,              /*!< 56 DMA2 Channel1 global interrupt                                         */
  DMA2_Channel2_IRQn        =  57,              /*!< 57 DMA2 Channel2 global interrupt                                         */
  DMA2_Channel3_IRQn        =  58,              /*!< 58 DMA2 Channel3 global interrupt                                         */
  DMA2_Channel4_5_IRQn      =  59               /*!< 59 DMA2 Channel4 and DMA2 Channel5 global interrupt                       */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0101U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               4        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_STM32F103.h"                   /*!< STM32F103 System                                                          */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           FSMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flexible static memory controller (FSMC)
  */

typedef struct {                                /*!< (@ 0xA0000000) FSMC Structure                                             */
  __IOM uint32_t  BCR1;                         /*!< (@ 0x00000000) SRAM/NOR-Flash chip-select control register 1              */
  __IOM uint32_t  BTR1;                         /*!< (@ 0x00000004) SRAM/NOR-Flash chip-select timing register 1               */
  __IOM uint32_t  BCR2;                         /*!< (@ 0x00000008) SRAM/NOR-Flash chip-select control register 2              */
  __IOM uint32_t  BTR2;                         /*!< (@ 0x0000000C) SRAM/NOR-Flash chip-select timing register 2               */
  __IOM uint32_t  BCR3;                         /*!< (@ 0x00000010) SRAM/NOR-Flash chip-select control register 3              */
  __IOM uint32_t  BTR3;                         /*!< (@ 0x00000014) SRAM/NOR-Flash chip-select timing register 3               */
  __IOM uint32_t  BCR4;                         /*!< (@ 0x00000018) SRAM/NOR-Flash chip-select control register 4              */
  __IOM uint32_t  BTR4;                         /*!< (@ 0x0000001C) SRAM/NOR-Flash chip-select timing register 4               */
  __IM  uint32_t  RESERVED[16];
  __IOM uint32_t  PCR2;                         /*!< (@ 0x00000060) PC Card/NAND Flash control register 2                      */
  __IOM uint32_t  SR2;                          /*!< (@ 0x00000064) FIFO status and interrupt register 2                       */
  __IOM uint32_t  PMEM2;                        /*!< (@ 0x00000068) Common memory space timing register 2                      */
  __IOM uint32_t  PATT2;                        /*!< (@ 0x0000006C) Attribute memory space timing register 2                   */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  ECCR2;                        /*!< (@ 0x00000074) ECC result register 2                                      */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  PCR3;                         /*!< (@ 0x00000080) PC Card/NAND Flash control register 3                      */
  __IOM uint32_t  SR3;                          /*!< (@ 0x00000084) FIFO status and interrupt register 3                       */
  __IOM uint32_t  PMEM3;                        /*!< (@ 0x00000088) Common memory space timing register 3                      */
  __IOM uint32_t  PATT3;                        /*!< (@ 0x0000008C) Attribute memory space timing register 3                   */
  __IM  uint32_t  RESERVED3;
  __IM  uint32_t  ECCR3;                        /*!< (@ 0x00000094) ECC result register 3                                      */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  PCR4;                         /*!< (@ 0x000000A0) PC Card/NAND Flash control register 4                      */
  __IOM uint32_t  SR4;                          /*!< (@ 0x000000A4) FIFO status and interrupt register 4                       */
  __IOM uint32_t  PMEM4;                        /*!< (@ 0x000000A8) Common memory space timing register 4                      */
  __IOM uint32_t  PATT4;                        /*!< (@ 0x000000AC) Attribute memory space timing register 4                   */
  __IOM uint32_t  PIO4;                         /*!< (@ 0x000000B0) I/O space timing register 4                                */
  __IM  uint32_t  RESERVED5[20];
  __IOM uint32_t  BWTR1;                        /*!< (@ 0x00000104) SRAM/NOR-Flash write timing registers 1                    */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  BWTR2;                        /*!< (@ 0x0000010C) SRAM/NOR-Flash write timing registers 2                    */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  BWTR3;                        /*!< (@ 0x00000114) SRAM/NOR-Flash write timing registers 3                    */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  BWTR4;                        /*!< (@ 0x0000011C) SRAM/NOR-Flash write timing registers 4                    */
} FSMC_Type;                                    /*!< Size = 288 (0x120)                                                        */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Power control register (PWR_CR)                            */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000004) Power control register (PWR_CR)                            */
} PWR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40021000) RCC Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Clock control register                                     */
  __IOM uint32_t  CFGR;                         /*!< (@ 0x00000004) Clock configuration register (RCC_CFGR)                    */
  __IOM uint32_t  CIR;                          /*!< (@ 0x00000008) Clock interrupt register (RCC_CIR)                         */
  __IOM uint32_t  APB2RSTR;                     /*!< (@ 0x0000000C) APB2 peripheral reset register (RCC_APB2RSTR)              */
  __IOM uint32_t  APB1RSTR;                     /*!< (@ 0x00000010) APB1 peripheral reset register (RCC_APB1RSTR)              */
  __IOM uint32_t  AHBENR;                       /*!< (@ 0x00000014) AHB Peripheral Clock enable register (RCC_AHBENR)          */
  __IOM uint32_t  APB2ENR;                      /*!< (@ 0x00000018) APB2 peripheral clock enable register (RCC_APB2ENR)        */
  __IOM uint32_t  APB1ENR;                      /*!< (@ 0x0000001C) APB1 peripheral clock enable register (RCC_APB1ENR)        */
  __IOM uint32_t  BDCR;                         /*!< (@ 0x00000020) Backup domain control register (RCC_BDCR)                  */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000024) Control/status register (RCC_CSR)                          */
} RCC_Type;                                     /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose I/O (GPIOA)
  */

typedef struct {                                /*!< (@ 0x40010800) GPIOA Structure                                            */
  __IOM uint32_t  CRL;                          /*!< (@ 0x00000000) Port configuration register low (GPIOn_CRL)                */
  __IOM uint32_t  CRH;                          /*!< (@ 0x00000004) Port configuration register high (GPIOn_CRL)               */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000008) Port input data register (GPIOn_IDR)                       */
  __IOM uint32_t  ODR;                          /*!< (@ 0x0000000C) Port output data register (GPIOn_ODR)                      */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000010) Port bit set/reset register (GPIOn_BSRR)                   */
  __OM  uint32_t  BRR;                          /*!< (@ 0x00000014) Port bit reset register (GPIOn_BRR)                        */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x00000018) Port configuration lock register                           */
} GPIOA_Type;                                   /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           AFIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Alternate function I/O (AFIO)
  */

typedef struct {                                /*!< (@ 0x40010000) AFIO Structure                                             */
  __IOM uint32_t  EVCR;                         /*!< (@ 0x00000000) Event Control Register (AFIO_EVCR)                         */
  __IOM uint32_t  MAPR;                         /*!< (@ 0x00000004) AF remap and debug I/O configuration register
                                                                    (AFIO_MAPR)                                                */
  __IOM uint32_t  EXTICR1;                      /*!< (@ 0x00000008) External interrupt configuration register 1 (AFIO_EXTICR1) */
  __IOM uint32_t  EXTICR2;                      /*!< (@ 0x0000000C) External interrupt configuration register 2 (AFIO_EXTICR2) */
  __IOM uint32_t  EXTICR3;                      /*!< (@ 0x00000010) External interrupt configuration register 3 (AFIO_EXTICR3) */
  __IOM uint32_t  EXTICR4;                      /*!< (@ 0x00000014) External interrupt configuration register 4 (AFIO_EXTICR4) */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  MAPR2;                        /*!< (@ 0x0000001C) AF remap and debug I/O configuration register              */
} AFIO_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief EXTI (EXTI)
  */

typedef struct {                                /*!< (@ 0x40010400) EXTI Structure                                             */
  __IOM uint32_t  IMR;                          /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */
  __IOM uint32_t  EMR;                          /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */
  __IOM uint32_t  RTSR;                         /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */
  __IOM uint32_t  FTSR;                         /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */
  __IOM uint32_t  SWIER;                        /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA1)
  */

typedef struct {                                /*!< (@ 0x40020000) DMA1 Structure                                             */
  __IM  uint32_t  ISR;                          /*!< (@ 0x00000000) DMA interrupt status register (DMA_ISR)                    */
  __OM  uint32_t  IFCR;                         /*!< (@ 0x00000004) DMA interrupt flag clear register (DMA_IFCR)               */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000008) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR1;                       /*!< (@ 0x0000000C) DMA channel 1 number of data register                      */
  __IOM uint32_t  CPAR1;                        /*!< (@ 0x00000010) DMA channel 1 peripheral address register                  */
  __IOM uint32_t  CMAR1;                        /*!< (@ 0x00000014) DMA channel 1 memory address register                      */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR2;                         /*!< (@ 0x0000001C) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR2;                       /*!< (@ 0x00000020) DMA channel 2 number of data register                      */
  __IOM uint32_t  CPAR2;                        /*!< (@ 0x00000024) DMA channel 2 peripheral address register                  */
  __IOM uint32_t  CMAR2;                        /*!< (@ 0x00000028) DMA channel 2 memory address register                      */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR3;                         /*!< (@ 0x00000030) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR3;                       /*!< (@ 0x00000034) DMA channel 3 number of data register                      */
  __IOM uint32_t  CPAR3;                        /*!< (@ 0x00000038) DMA channel 3 peripheral address register                  */
  __IOM uint32_t  CMAR3;                        /*!< (@ 0x0000003C) DMA channel 3 memory address register                      */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000044) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR4;                       /*!< (@ 0x00000048) DMA channel 4 number of data register                      */
  __IOM uint32_t  CPAR4;                        /*!< (@ 0x0000004C) DMA channel 4 peripheral address register                  */
  __IOM uint32_t  CMAR4;                        /*!< (@ 0x00000050) DMA channel 4 memory address register                      */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  CCR5;                         /*!< (@ 0x00000058) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR5;                       /*!< (@ 0x0000005C) DMA channel 5 number of data register                      */
  __IOM uint32_t  CPAR5;                        /*!< (@ 0x00000060) DMA channel 5 peripheral address register                  */
  __IOM uint32_t  CMAR5;                        /*!< (@ 0x00000064) DMA channel 5 memory address register                      */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  CCR6;                         /*!< (@ 0x0000006C) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR6;                       /*!< (@ 0x00000070) DMA channel 6 number of data register                      */
  __IOM uint32_t  CPAR6;                        /*!< (@ 0x00000074) DMA channel 6 peripheral address register                  */
  __IOM uint32_t  CMAR6;                        /*!< (@ 0x00000078) DMA channel 6 memory address register                      */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  CCR7;                         /*!< (@ 0x00000080) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR7;                       /*!< (@ 0x00000084) DMA channel 7 number of data register                      */
  __IOM uint32_t  CPAR7;                        /*!< (@ 0x00000088) DMA channel 7 peripheral address register                  */
  __IOM uint32_t  CMAR7;                        /*!< (@ 0x0000008C) DMA channel 7 memory address register                      */
} DMA1_Type;                                    /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                           SDIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure digital input/output  interface (SDIO)
  */

typedef struct {                                /*!< (@ 0x40018000) SDIO Structure                                             */
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000000) Bits 1:0 = PWRCTRL: Power supply control bits              */
  __IOM uint32_t  CLKCR;                        /*!< (@ 0x00000004) SDI clock control register (SDIO_CLKCR)                    */
  __IOM uint32_t  ARG;                          /*!< (@ 0x00000008) Bits 31:0 = : Command argument                             */
  __IOM uint32_t  CMD;                          /*!< (@ 0x0000000C) SDIO command register (SDIO_CMD)                           */
  __IM  uint32_t  RESPCMD;                      /*!< (@ 0x00000010) SDIO command register                                      */
  __IM  uint32_t  RESPI1;                       /*!< (@ 0x00000014) Bits 31:0 = CARDSTATUS1                                    */
  __IM  uint32_t  RESP2;                        /*!< (@ 0x00000018) Bits 31:0 = CARDSTATUS2                                    */
  __IM  uint32_t  RESP3;                        /*!< (@ 0x0000001C) Bits 31:0 = CARDSTATUS3                                    */
  __IM  uint32_t  RESP4;                        /*!< (@ 0x00000020) Bits 31:0 = CARDSTATUS4                                    */
  __IOM uint32_t  DTIMER;                       /*!< (@ 0x00000024) Bits 31:0 = DATATIME: Data timeout period                  */
  __IOM uint32_t  DLEN;                         /*!< (@ 0x00000028) Bits 24:0 = DATALENGTH: Data length value                  */
  __IOM uint32_t  DCTRL;                        /*!< (@ 0x0000002C) SDIO data control register (SDIO_DCTRL)                    */
  __IM  uint32_t  DCOUNT;                       /*!< (@ 0x00000030) Bits 24:0 = DATACOUNT: Data count value                    */
  __IM  uint32_t  STA;                          /*!< (@ 0x00000034) SDIO status register (SDIO_STA)                            */
  __IOM uint32_t  ICR;                          /*!< (@ 0x00000038) SDIO interrupt clear register (SDIO_ICR)                   */
  __IOM uint32_t  MASK;                         /*!< (@ 0x0000003C) SDIO mask register (SDIO_MASK)                             */
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  FIFOCNT;                      /*!< (@ 0x00000048) Bits 23:0 = FIFOCOUNT: Remaining number of words
                                                                    to be written to or read from the FIFO                     */
  __IM  uint32_t  RESERVED1[13];
  __IOM uint32_t  FIFO;                         /*!< (@ 0x00000080) bits 31:0 = FIFOData: Receive and transmit FIFO
                                                                    data                                                       */
} SDIO_Type;                                    /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */
  __IOM uint32_t  CRH;                          /*!< (@ 0x00000000) RTC Control Register High                                  */
  __IOM uint32_t  CRL;                          /*!< (@ 0x00000004) RTC Control Register Low                                   */
  __OM  uint32_t  PRLH;                         /*!< (@ 0x00000008) RTC Prescaler Load Register High                           */
  __OM  uint32_t  PRLL;                         /*!< (@ 0x0000000C) RTC Prescaler Load Register Low                            */
  __IM  uint32_t  DIVH;                         /*!< (@ 0x00000010) RTC Prescaler Divider Register High                        */
  __IM  uint32_t  DIVL;                         /*!< (@ 0x00000014) RTC Prescaler Divider Register Low                         */
  __IOM uint32_t  CNTH;                         /*!< (@ 0x00000018) RTC Counter Register High                                  */
  __IOM uint32_t  CNTL;                         /*!< (@ 0x0000001C) RTC Counter Register Low                                   */
  __OM  uint32_t  ALRH;                         /*!< (@ 0x00000020) RTC Alarm Register High                                    */
  __OM  uint32_t  ALRL;                         /*!< (@ 0x00000024) RTC Alarm Register Low                                     */
} RTC_Type;                                     /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                            BKP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup registers (BKP)
  */

typedef struct {                                /*!< (@ 0x40006C00) BKP Structure                                              */
  __IOM uint32_t  DR1;                          /*!< (@ 0x00000000) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR2;                          /*!< (@ 0x00000004) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR3;                          /*!< (@ 0x00000008) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR4;                          /*!< (@ 0x0000000C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR5;                          /*!< (@ 0x00000010) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR6;                          /*!< (@ 0x00000014) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR7;                          /*!< (@ 0x00000018) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR8;                          /*!< (@ 0x0000001C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR9;                          /*!< (@ 0x00000020) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR10;                         /*!< (@ 0x00000024) Backup data register (BKP_DR)                              */
  __IOM uint32_t  RTCCR;                        /*!< (@ 0x00000028) RTC clock calibration register (BKP_RTCCR)                 */
  __IOM uint32_t  CR;                           /*!< (@ 0x0000002C) Backup control register (BKP_CR)                           */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000030) BKP_CSR control/status register (BKP_CSR)                  */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  DR11;                         /*!< (@ 0x0000003C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR12;                         /*!< (@ 0x00000040) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR13;                         /*!< (@ 0x00000044) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR14;                         /*!< (@ 0x00000048) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR15;                         /*!< (@ 0x0000004C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR16;                         /*!< (@ 0x00000050) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR17;                         /*!< (@ 0x00000054) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR18;                         /*!< (@ 0x00000058) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR19;                         /*!< (@ 0x0000005C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR20;                         /*!< (@ 0x00000060) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR21;                         /*!< (@ 0x00000064) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR22;                         /*!< (@ 0x00000068) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR23;                         /*!< (@ 0x0000006C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR24;                         /*!< (@ 0x00000070) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR25;                         /*!< (@ 0x00000074) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR26;                         /*!< (@ 0x00000078) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR27;                         /*!< (@ 0x0000007C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR28;                         /*!< (@ 0x00000080) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR29;                         /*!< (@ 0x00000084) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR30;                         /*!< (@ 0x00000088) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR31;                         /*!< (@ 0x0000008C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR32;                         /*!< (@ 0x00000090) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR33;                         /*!< (@ 0x00000094) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR34;                         /*!< (@ 0x00000098) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR35;                         /*!< (@ 0x0000009C) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR36;                         /*!< (@ 0x000000A0) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR37;                         /*!< (@ 0x000000A4) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR38;                         /*!< (@ 0x000000A8) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR39;                         /*!< (@ 0x000000AC) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR40;                         /*!< (@ 0x000000B0) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR41;                         /*!< (@ 0x000000B4) Backup data register (BKP_DR)                              */
  __IOM uint32_t  DR42;                         /*!< (@ 0x000000B8) Backup data register (BKP_DR)                              */
} BKP_Type;                                     /*!< Size = 188 (0xbc)                                                         */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */
  __OM  uint32_t  KR;                           /*!< (@ 0x00000000) Key register (IWDG_KR)                                     */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000004) Prescaler register (IWDG_PR)                               */
  __IOM uint32_t  RLR;                          /*!< (@ 0x00000008) Reload register (IWDG_RLR)                                 */
  __IM  uint32_t  SR;                           /*!< (@ 0x0000000C) Status register (IWDG_SR)                                  */
} IWDG_Type;                                    /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Control register (WWDG_CR)                                 */
  __IOM uint32_t  CFR;                          /*!< (@ 0x00000004) Configuration register (WWDG_CFR)                          */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) Status register (WWDG_SR)                                  */
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TIM1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced timer (TIM1)
  */

typedef struct {                                /*!< (@ 0x40012C00) TIM1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IOM uint32_t  RCR;                          /*!< (@ 0x00000030) repetition counter register                                */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IOM uint32_t  BDTR;                         /*!< (@ 0x00000044) break and dead-time register                               */
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timer (TIM2)
  */

typedef struct {                                /*!< (@ 0x40000000) TIM2 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM2_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM9                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timer (TIM9)
  */

typedef struct {                                /*!< (@ 0x40014C00) TIM9 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
} TIM9_Type;                                    /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM10                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timer (TIM10)
  */

typedef struct {                                /*!< (@ 0x40015000) TIM10 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register (input mode)                 */
  };
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
} TIM10_Type;                                   /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic timer (TIM6)
  */

typedef struct {                                /*!< (@ 0x40001000) TIM6 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
} TIM6_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  OAR1;                         /*!< (@ 0x00000008) Own address register 1                                     */
  __IOM uint32_t  OAR2;                         /*!< (@ 0x0000000C) Own address register 2                                     */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000010) Data register                                              */
  __IOM uint32_t  SR1;                          /*!< (@ 0x00000014) Status register 1                                          */
  __IM  uint32_t  SR2;                          /*!< (@ 0x00000018) Status register 2                                          */
  __IOM uint32_t  CCR;                          /*!< (@ 0x0000001C) Clock control register                                     */
  __IOM uint32_t  TRISE;                        /*!< (@ 0x00000020) TRISE register                                             */
} I2C1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x0000000C) data register                                              */
  __IOM uint32_t  CRCPR;                        /*!< (@ 0x00000010) CRC polynomial register                                    */
  __IM  uint32_t  RXCRCR;                       /*!< (@ 0x00000014) RX CRC register                                            */
  __IM  uint32_t  TXCRCR;                       /*!< (@ 0x00000018) TX CRC register                                            */
  __IOM uint32_t  I2SCFGR;                      /*!< (@ 0x0000001C) I2S configuration register                                 */
  __IOM uint32_t  I2SPR;                        /*!< (@ 0x00000020) I2S prescaler register                                     */
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver  transmitter (USART1)
  */

typedef struct {                                /*!< (@ 0x40013800) USART1 Structure                                           */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) Status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) Data register                                              */
  __IOM uint32_t  BRR;                          /*!< (@ 0x00000008) Baud rate register                                         */
  __IOM uint32_t  CR1;                          /*!< (@ 0x0000000C) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000010) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000014) Control register 3                                         */
  __IOM uint32_t  GTPR;                         /*!< (@ 0x00000018) Guard time and prescaler register                          */
} USART1_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC1)
  */

typedef struct {                                /*!< (@ 0x40012400) ADC1 Structure                                             */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) status register                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000004) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000008) control register 2                                         */
  __IOM uint32_t  SMPR1;                        /*!< (@ 0x0000000C) sample time register 1                                     */
  __IOM uint32_t  SMPR2;                        /*!< (@ 0x00000010) sample time register 2                                     */
  __IOM uint32_t  JOFR1;                        /*!< (@ 0x00000014) injected channel data offset register x                    */
  __IOM uint32_t  JOFR2;                        /*!< (@ 0x00000018) injected channel data offset register x                    */
  __IOM uint32_t  JOFR3;                        /*!< (@ 0x0000001C) injected channel data offset register x                    */
  __IOM uint32_t  JOFR4;                        /*!< (@ 0x00000020) injected channel data offset register x                    */
  __IOM uint32_t  HTR;                          /*!< (@ 0x00000024) watchdog higher threshold register                         */
  __IOM uint32_t  LTR;                          /*!< (@ 0x00000028) watchdog lower threshold register                          */
  __IOM uint32_t  SQR1;                         /*!< (@ 0x0000002C) regular sequence register 1                                */
  __IOM uint32_t  SQR2;                         /*!< (@ 0x00000030) regular sequence register 2                                */
  __IOM uint32_t  SQR3;                         /*!< (@ 0x00000034) regular sequence register 3                                */
  __IOM uint32_t  JSQR;                         /*!< (@ 0x00000038) injected sequence register                                 */
  __IM  uint32_t  JDR1;                         /*!< (@ 0x0000003C) injected data register x                                   */
  __IM  uint32_t  JDR2;                         /*!< (@ 0x00000040) injected data register x                                   */
  __IM  uint32_t  JDR3;                         /*!< (@ 0x00000044) injected data register x                                   */
  __IM  uint32_t  JDR4;                         /*!< (@ 0x00000048) injected data register x                                   */
  __IM  uint32_t  DR;                           /*!< (@ 0x0000004C) regular data register                                      */
} ADC1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           ADC2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC2)
  */

typedef struct {                                /*!< (@ 0x40012800) ADC2 Structure                                             */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) status register                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000004) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000008) control register 2                                         */
  __IOM uint32_t  SMPR1;                        /*!< (@ 0x0000000C) sample time register 1                                     */
  __IOM uint32_t  SMPR2;                        /*!< (@ 0x00000010) sample time register 2                                     */
  __IOM uint32_t  JOFR1;                        /*!< (@ 0x00000014) injected channel data offset register x                    */
  __IOM uint32_t  JOFR2;                        /*!< (@ 0x00000018) injected channel data offset register x                    */
  __IOM uint32_t  JOFR3;                        /*!< (@ 0x0000001C) injected channel data offset register x                    */
  __IOM uint32_t  JOFR4;                        /*!< (@ 0x00000020) injected channel data offset register x                    */
  __IOM uint32_t  HTR;                          /*!< (@ 0x00000024) watchdog higher threshold register                         */
  __IOM uint32_t  LTR;                          /*!< (@ 0x00000028) watchdog lower threshold register                          */
  __IOM uint32_t  SQR1;                         /*!< (@ 0x0000002C) regular sequence register 1                                */
  __IOM uint32_t  SQR2;                         /*!< (@ 0x00000030) regular sequence register 2                                */
  __IOM uint32_t  SQR3;                         /*!< (@ 0x00000034) regular sequence register 3                                */
  __IOM uint32_t  JSQR;                         /*!< (@ 0x00000038) injected sequence register                                 */
  __IM  uint32_t  JDR1;                         /*!< (@ 0x0000003C) injected data register x                                   */
  __IM  uint32_t  JDR2;                         /*!< (@ 0x00000040) injected data register x                                   */
  __IM  uint32_t  JDR3;                         /*!< (@ 0x00000044) injected data register x                                   */
  __IM  uint32_t  JDR4;                         /*!< (@ 0x00000048) injected data register x                                   */
  __IM  uint32_t  DR;                           /*!< (@ 0x0000004C) regular data register                                      */
} ADC2_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           CAN1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN1)
  */

typedef struct {                                /*!< (@ 0x40006400) CAN1 Structure                                             */
  __IOM uint32_t  CAN_MCR;                      /*!< (@ 0x00000000) CAN_MCR                                                    */
  __IOM uint32_t  CAN_MSR;                      /*!< (@ 0x00000004) CAN_MSR                                                    */
  __IOM uint32_t  CAN_TSR;                      /*!< (@ 0x00000008) CAN_TSR                                                    */
  __IOM uint32_t  CAN_RF0R;                     /*!< (@ 0x0000000C) CAN_RF0R                                                   */
  __IOM uint32_t  CAN_RF1R;                     /*!< (@ 0x00000010) CAN_RF1R                                                   */
  __IOM uint32_t  CAN_IER;                      /*!< (@ 0x00000014) CAN_IER                                                    */
  __IOM uint32_t  CAN_ESR;                      /*!< (@ 0x00000018) CAN_ESR                                                    */
  __IOM uint32_t  CAN_BTR;                      /*!< (@ 0x0000001C) CAN_BTR                                                    */
  __IM  uint32_t  RESERVED[88];
  __IOM uint32_t  CAN_TI0R;                     /*!< (@ 0x00000180) CAN_TI0R                                                   */
  __IOM uint32_t  CAN_TDT0R;                    /*!< (@ 0x00000184) CAN_TDT0R                                                  */
  __IOM uint32_t  CAN_TDL0R;                    /*!< (@ 0x00000188) CAN_TDL0R                                                  */
  __IOM uint32_t  CAN_TDH0R;                    /*!< (@ 0x0000018C) CAN_TDH0R                                                  */
  __IOM uint32_t  CAN_TI1R;                     /*!< (@ 0x00000190) CAN_TI1R                                                   */
  __IOM uint32_t  CAN_TDT1R;                    /*!< (@ 0x00000194) CAN_TDT1R                                                  */
  __IOM uint32_t  CAN_TDL1R;                    /*!< (@ 0x00000198) CAN_TDL1R                                                  */
  __IOM uint32_t  CAN_TDH1R;                    /*!< (@ 0x0000019C) CAN_TDH1R                                                  */
  __IOM uint32_t  CAN_TI2R;                     /*!< (@ 0x000001A0) CAN_TI2R                                                   */
  __IOM uint32_t  CAN_TDT2R;                    /*!< (@ 0x000001A4) CAN_TDT2R                                                  */
  __IOM uint32_t  CAN_TDL2R;                    /*!< (@ 0x000001A8) CAN_TDL2R                                                  */
  __IOM uint32_t  CAN_TDH2R;                    /*!< (@ 0x000001AC) CAN_TDH2R                                                  */
  __IM  uint32_t  CAN_RI0R;                     /*!< (@ 0x000001B0) CAN_RI0R                                                   */
  __IM  uint32_t  CAN_RDT0R;                    /*!< (@ 0x000001B4) CAN_RDT0R                                                  */
  __IM  uint32_t  CAN_RDL0R;                    /*!< (@ 0x000001B8) CAN_RDL0R                                                  */
  __IM  uint32_t  CAN_RDH0R;                    /*!< (@ 0x000001BC) CAN_RDH0R                                                  */
  __IM  uint32_t  CAN_RI1R;                     /*!< (@ 0x000001C0) CAN_RI1R                                                   */
  __IM  uint32_t  CAN_RDT1R;                    /*!< (@ 0x000001C4) CAN_RDT1R                                                  */
  __IM  uint32_t  CAN_RDL1R;                    /*!< (@ 0x000001C8) CAN_RDL1R                                                  */
  __IM  uint32_t  CAN_RDH1R;                    /*!< (@ 0x000001CC) CAN_RDH1R                                                  */
  __IM  uint32_t  RESERVED1[12];
  __IOM uint32_t  CAN_FMR;                      /*!< (@ 0x00000200) CAN_FMR                                                    */
  __IOM uint32_t  CAN_FM1R;                     /*!< (@ 0x00000204) CAN_FM1R                                                   */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CAN_FS1R;                     /*!< (@ 0x0000020C) CAN_FS1R                                                   */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  CAN_FFA1R;                    /*!< (@ 0x00000214) CAN_FFA1R                                                  */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  CAN_FA1R;                     /*!< (@ 0x0000021C) CAN_FA1R                                                   */
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  F0R1;                         /*!< (@ 0x00000240) Filter bank 0 register 1                                   */
  __IOM uint32_t  F0R2;                         /*!< (@ 0x00000244) Filter bank 0 register 2                                   */
  __IOM uint32_t  F1R1;                         /*!< (@ 0x00000248) Filter bank 1 register 1                                   */
  __IOM uint32_t  F1R2;                         /*!< (@ 0x0000024C) Filter bank 1 register 2                                   */
  __IOM uint32_t  F2R1;                         /*!< (@ 0x00000250) Filter bank 2 register 1                                   */
  __IOM uint32_t  F2R2;                         /*!< (@ 0x00000254) Filter bank 2 register 2                                   */
  __IOM uint32_t  F3R1;                         /*!< (@ 0x00000258) Filter bank 3 register 1                                   */
  __IOM uint32_t  F3R2;                         /*!< (@ 0x0000025C) Filter bank 3 register 2                                   */
  __IOM uint32_t  F4R1;                         /*!< (@ 0x00000260) Filter bank 4 register 1                                   */
  __IOM uint32_t  F4R2;                         /*!< (@ 0x00000264) Filter bank 4 register 2                                   */
  __IOM uint32_t  F5R1;                         /*!< (@ 0x00000268) Filter bank 5 register 1                                   */
  __IOM uint32_t  F5R2;                         /*!< (@ 0x0000026C) Filter bank 5 register 2                                   */
  __IOM uint32_t  F6R1;                         /*!< (@ 0x00000270) Filter bank 6 register 1                                   */
  __IOM uint32_t  F6R2;                         /*!< (@ 0x00000274) Filter bank 6 register 2                                   */
  __IOM uint32_t  F7R1;                         /*!< (@ 0x00000278) Filter bank 7 register 1                                   */
  __IOM uint32_t  F7R2;                         /*!< (@ 0x0000027C) Filter bank 7 register 2                                   */
  __IOM uint32_t  F8R1;                         /*!< (@ 0x00000280) Filter bank 8 register 1                                   */
  __IOM uint32_t  F8R2;                         /*!< (@ 0x00000284) Filter bank 8 register 2                                   */
  __IOM uint32_t  F9R1;                         /*!< (@ 0x00000288) Filter bank 9 register 1                                   */
  __IOM uint32_t  F9R2;                         /*!< (@ 0x0000028C) Filter bank 9 register 2                                   */
  __IOM uint32_t  F10R1;                        /*!< (@ 0x00000290) Filter bank 10 register 1                                  */
  __IOM uint32_t  F10R2;                        /*!< (@ 0x00000294) Filter bank 10 register 2                                  */
  __IOM uint32_t  F11R1;                        /*!< (@ 0x00000298) Filter bank 11 register 1                                  */
  __IOM uint32_t  F11R2;                        /*!< (@ 0x0000029C) Filter bank 11 register 2                                  */
  __IOM uint32_t  F12R1;                        /*!< (@ 0x000002A0) Filter bank 4 register 1                                   */
  __IOM uint32_t  F12R2;                        /*!< (@ 0x000002A4) Filter bank 12 register 2                                  */
  __IOM uint32_t  F13R1;                        /*!< (@ 0x000002A8) Filter bank 13 register 1                                  */
  __IOM uint32_t  F13R2;                        /*!< (@ 0x000002AC) Filter bank 13 register 2                                  */
} CAN1_Type;                                    /*!< Size = 688 (0x2b0)                                                        */



/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital to analog converter (DAC)
  */

typedef struct {                                /*!< (@ 0x40007400) DAC Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Control register (DAC_CR)                                  */
  __OM  uint32_t  SWTRIGR;                      /*!< (@ 0x00000004) DAC software trigger register (DAC_SWTRIGR)                */
  __IOM uint32_t  DHR12R1;                      /*!< (@ 0x00000008) DAC channel1 12-bit right-aligned data holding
                                                                    register(DAC_DHR12R1)                                      */
  __IOM uint32_t  DHR12L1;                      /*!< (@ 0x0000000C) DAC channel1 12-bit left aligned data holding
                                                                    register (DAC_DHR12L1)                                     */
  __IOM uint32_t  DHR8R1;                       /*!< (@ 0x00000010) DAC channel1 8-bit right aligned data holding
                                                                    register (DAC_DHR8R1)                                      */
  __IOM uint32_t  DHR12R2;                      /*!< (@ 0x00000014) DAC channel2 12-bit right aligned data holding
                                                                    register (DAC_DHR12R2)                                     */
  __IOM uint32_t  DHR12L2;                      /*!< (@ 0x00000018) DAC channel2 12-bit left aligned data holding
                                                                    register (DAC_DHR12L2)                                     */
  __IOM uint32_t  DHR8R2;                       /*!< (@ 0x0000001C) DAC channel2 8-bit right-aligned data holding
                                                                    register (DAC_DHR8R2)                                      */
  __IOM uint32_t  DHR12RD;                      /*!< (@ 0x00000020) Dual DAC 12-bit right-aligned data holding register
                                                                    (DAC_DHR12RD), Bits 31:28 Reserved, Bits
                                                                    15:12 Reserved                                             */
  __IOM uint32_t  DHR12LD;                      /*!< (@ 0x00000024) DUAL DAC 12-bit left aligned data holding register
                                                                    (DAC_DHR12LD), Bits 19:16 Reserved, Bits
                                                                    3:0 Reserved                                               */
  __IOM uint32_t  DHR8RD;                       /*!< (@ 0x00000028) DUAL DAC 8-bit right aligned data holding register
                                                                    (DAC_DHR8RD), Bits 31:16 Reserved                          */
  __IM  uint32_t  DOR1;                         /*!< (@ 0x0000002C) DAC channel1 data output register (DAC_DOR1)               */
  __IM  uint32_t  DOR2;                         /*!< (@ 0x00000030) DAC channel2 data output register (DAC_DOR2)               */
} DAC_Type;                                     /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBG)
  */

typedef struct {                                /*!< (@ 0xE0042000) DBG Structure                                              */
  __IM  uint32_t  IDCODE;                       /*!< (@ 0x00000000) DBGMCU_IDCODE                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000004) DBGMCU_CR                                                  */
} DBG_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           UART4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal asynchronous receiver  transmitter (UART4)
  */

typedef struct {                                /*!< (@ 0x40004C00) UART4 Structure                                            */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) UART4_SR                                                   */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) UART4_DR                                                   */
  __IOM uint32_t  BRR;                          /*!< (@ 0x00000008) UART4_BRR                                                  */
  __IOM uint32_t  CR1;                          /*!< (@ 0x0000000C) UART4_CR1                                                  */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000010) UART4_CR2                                                  */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000014) UART4_CR3                                                  */
} UART4_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART5                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal asynchronous receiver  transmitter (UART5)
  */

typedef struct {                                /*!< (@ 0x40005000) UART5 Structure                                            */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) UART4_SR                                                   */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) UART4_DR                                                   */
  __IOM uint32_t  BRR;                          /*!< (@ 0x00000008) UART4_BRR                                                  */
  __IOM uint32_t  CR1;                          /*!< (@ 0x0000000C) UART4_CR1                                                  */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000010) UART4_CR2                                                  */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000014) UART4_CR3                                                  */
} UART5_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC calculation unit (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000000) Data register                                              */
  __IOM uint32_t  IDR;                          /*!< (@ 0x00000004) Independent Data register                                  */
  __OM  uint32_t  CR;                           /*!< (@ 0x00000008) Control register                                           */
} CRC_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief FLASH (FLASH)
  */

typedef struct {                                /*!< (@ 0x40022000) FLASH Structure                                            */
  __IOM uint32_t  ACR;                          /*!< (@ 0x00000000) Flash access control register                              */
  __OM  uint32_t  KEYR;                         /*!< (@ 0x00000004) Flash key register                                         */
  __OM  uint32_t  OPTKEYR;                      /*!< (@ 0x00000008) Flash option key register                                  */
  __IOM uint32_t  SR;                           /*!< (@ 0x0000000C) Status register                                            */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000010) Control register                                           */
  __OM  uint32_t  AR;                           /*!< (@ 0x00000014) Flash address register                                     */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  OBR;                          /*!< (@ 0x0000001C) Option byte register                                       */
  __IM  uint32_t  WRPR;                         /*!< (@ 0x00000020) Write protection register                                  */
} FLASH_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt  Controller (NVIC)
  */

typedef struct {                                /*!< (@ 0xE000E000) NVIC Structure                                             */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  ICTR;                         /*!< (@ 0x00000004) Interrupt Controller Type Register                         */
  __IM  uint32_t  RESERVED1[62];
  __IOM uint32_t  ISER0;                        /*!< (@ 0x00000100) Interrupt Set-Enable Register                              */
  __IOM uint32_t  ISER1;                        /*!< (@ 0x00000104) Interrupt Set-Enable Register                              */
  __IM  uint32_t  RESERVED2[30];
  __IOM uint32_t  ICER0;                        /*!< (@ 0x00000180) Interrupt Clear-Enable Register                            */
  __IOM uint32_t  ICER1;                        /*!< (@ 0x00000184) Interrupt Clear-Enable Register                            */
  __IM  uint32_t  RESERVED3[30];
  __IOM uint32_t  ISPR0;                        /*!< (@ 0x00000200) Interrupt Set-Pending Register                             */
  __IOM uint32_t  ISPR1;                        /*!< (@ 0x00000204) Interrupt Set-Pending Register                             */
  __IM  uint32_t  RESERVED4[30];
  __IOM uint32_t  ICPR0;                        /*!< (@ 0x00000280) Interrupt Clear-Pending Register                           */
  __IOM uint32_t  ICPR1;                        /*!< (@ 0x00000284) Interrupt Clear-Pending Register                           */
  __IM  uint32_t  RESERVED5[30];
  __IM  uint32_t  IABR0;                        /*!< (@ 0x00000300) Interrupt Active Bit Register                              */
  __IM  uint32_t  IABR1;                        /*!< (@ 0x00000304) Interrupt Active Bit Register                              */
  __IM  uint32_t  RESERVED6[62];
  __IOM uint32_t  IPR0;                         /*!< (@ 0x00000400) Interrupt Priority Register                                */
  __IOM uint32_t  IPR1;                         /*!< (@ 0x00000404) Interrupt Priority Register                                */
  __IOM uint32_t  IPR2;                         /*!< (@ 0x00000408) Interrupt Priority Register                                */
  __IOM uint32_t  IPR3;                         /*!< (@ 0x0000040C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR4;                         /*!< (@ 0x00000410) Interrupt Priority Register                                */
  __IOM uint32_t  IPR5;                         /*!< (@ 0x00000414) Interrupt Priority Register                                */
  __IOM uint32_t  IPR6;                         /*!< (@ 0x00000418) Interrupt Priority Register                                */
  __IOM uint32_t  IPR7;                         /*!< (@ 0x0000041C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR8;                         /*!< (@ 0x00000420) Interrupt Priority Register                                */
  __IOM uint32_t  IPR9;                         /*!< (@ 0x00000424) Interrupt Priority Register                                */
  __IOM uint32_t  IPR10;                        /*!< (@ 0x00000428) Interrupt Priority Register                                */
  __IOM uint32_t  IPR11;                        /*!< (@ 0x0000042C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR12;                        /*!< (@ 0x00000430) Interrupt Priority Register                                */
  __IOM uint32_t  IPR13;                        /*!< (@ 0x00000434) Interrupt Priority Register                                */
  __IOM uint32_t  IPR14;                        /*!< (@ 0x00000438) Interrupt Priority Register                                */
  __IM  uint32_t  RESERVED7[689];
  __OM  uint32_t  STIR;                         /*!< (@ 0x00000F00) Software Triggered Interrupt Register                      */
} NVIC_Type;                                    /*!< Size = 3844 (0xf04)                                                       */



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal serial bus full-speed device  interface (USB)
  */

typedef struct {                                /*!< (@ 0x40005C00) USB Structure                                              */
  __IOM uint32_t  EP0R;                         /*!< (@ 0x00000000) endpoint 0 register                                        */
  __IOM uint32_t  EP1R;                         /*!< (@ 0x00000004) endpoint 1 register                                        */
  __IOM uint32_t  EP2R;                         /*!< (@ 0x00000008) endpoint 2 register                                        */
  __IOM uint32_t  EP3R;                         /*!< (@ 0x0000000C) endpoint 3 register                                        */
  __IOM uint32_t  EP4R;                         /*!< (@ 0x00000010) endpoint 4 register                                        */
  __IOM uint32_t  EP5R;                         /*!< (@ 0x00000014) endpoint 5 register                                        */
  __IOM uint32_t  EP6R;                         /*!< (@ 0x00000018) endpoint 6 register                                        */
  __IOM uint32_t  EP7R;                         /*!< (@ 0x0000001C) endpoint 7 register                                        */
  __IM  uint32_t  RESERVED[8];
  __IOM uint32_t  CNTR;                         /*!< (@ 0x00000040) control register                                           */
  __IOM uint32_t  ISTR;                         /*!< (@ 0x00000044) interrupt status register                                  */
  __IM  uint32_t  FNR;                          /*!< (@ 0x00000048) frame number register                                      */
  __IOM uint32_t  DADDR;                        /*!< (@ 0x0000004C) device address                                             */
  __IOM uint32_t  BTABLE;                       /*!< (@ 0x00000050) Buffer table address                                       */
} USB_Type;                                     /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x50000800) OTG_FS_DEVICE Structure                                    */
  __IOM uint32_t  FS_DCFG;                      /*!< (@ 0x00000000) OTG_FS device configuration register (OTG_FS_DCFG)         */
  __IOM uint32_t  FS_DCTL;                      /*!< (@ 0x00000004) OTG_FS device control register (OTG_FS_DCTL)               */
  __IM  uint32_t  FS_DSTS;                      /*!< (@ 0x00000008) OTG_FS device status register (OTG_FS_DSTS)                */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FS_DIEPMSK;                   /*!< (@ 0x00000010) OTG_FS device IN endpoint common interrupt mask
                                                                    register (OTG_FS_DIEPMSK)                                  */
  __IOM uint32_t  FS_DOEPMSK;                   /*!< (@ 0x00000014) OTG_FS device OUT endpoint common interrupt mask
                                                                    register (OTG_FS_DOEPMSK)                                  */
  __IM  uint32_t  FS_DAINT;                     /*!< (@ 0x00000018) OTG_FS device all endpoints interrupt register
                                                                    (OTG_FS_DAINT)                                             */
  __IOM uint32_t  FS_DAINTMSK;                  /*!< (@ 0x0000001C) OTG_FS all endpoints interrupt mask register
                                                                    (OTG_FS_DAINTMSK)                                          */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  DVBUSDIS;                     /*!< (@ 0x00000028) OTG_FS device VBUS discharge time register                 */
  __IOM uint32_t  DVBUSPULSE;                   /*!< (@ 0x0000002C) OTG_FS device VBUS pulsing time register                   */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  DIEPEMPMSK;                   /*!< (@ 0x00000034) OTG_FS device IN endpoint FIFO empty interrupt
                                                                    mask register                                              */
  __IM  uint32_t  RESERVED3[50];
  __IOM uint32_t  FS_DIEPCTL0;                  /*!< (@ 0x00000100) OTG_FS device control IN endpoint 0 control register
                                                                    (OTG_FS_DIEPCTL0)                                          */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  DIEPINT0;                     /*!< (@ 0x00000108) device endpoint-x interrupt register                       */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  DIEPTSIZ0;                    /*!< (@ 0x00000110) device endpoint-0 transfer size register                   */
  __IM  uint32_t  RESERVED6;
  __IM  uint32_t  DTXFSTS0;                     /*!< (@ 0x00000118) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  DIEPCTL1;                     /*!< (@ 0x00000120) OTG device endpoint-1 control register                     */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  DIEPINT1;                     /*!< (@ 0x00000128) device endpoint-1 interrupt register                       */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  DIEPTSIZ1;                    /*!< (@ 0x00000130) device endpoint-1 transfer size register                   */
  __IM  uint32_t  RESERVED10;
  __IM  uint32_t  DTXFSTS1;                     /*!< (@ 0x00000138) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  DIEPCTL2;                     /*!< (@ 0x00000140) OTG device endpoint-2 control register                     */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  DIEPINT2;                     /*!< (@ 0x00000148) device endpoint-2 interrupt register                       */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  DIEPTSIZ2;                    /*!< (@ 0x00000150) device endpoint-2 transfer size register                   */
  __IM  uint32_t  RESERVED14;
  __IM  uint32_t  DTXFSTS2;                     /*!< (@ 0x00000158) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  DIEPCTL3;                     /*!< (@ 0x00000160) OTG device endpoint-3 control register                     */
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  DIEPINT3;                     /*!< (@ 0x00000168) device endpoint-3 interrupt register                       */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  DIEPTSIZ3;                    /*!< (@ 0x00000170) device endpoint-3 transfer size register                   */
  __IM  uint32_t  RESERVED18;
  __IM  uint32_t  DTXFSTS3;                     /*!< (@ 0x00000178) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED19[97];
  __IOM uint32_t  DOEPCTL0;                     /*!< (@ 0x00000300) device endpoint-0 control register                         */
  __IM  uint32_t  RESERVED20;
  __IOM uint32_t  DOEPINT0;                     /*!< (@ 0x00000308) device endpoint-0 interrupt register                       */
  __IM  uint32_t  RESERVED21;
  __IOM uint32_t  DOEPTSIZ0;                    /*!< (@ 0x00000310) device OUT endpoint-0 transfer size register               */
  __IM  uint32_t  RESERVED22[3];
  __IOM uint32_t  DOEPCTL1;                     /*!< (@ 0x00000320) device endpoint-1 control register                         */
  __IM  uint32_t  RESERVED23;
  __IOM uint32_t  DOEPINT1;                     /*!< (@ 0x00000328) device endpoint-1 interrupt register                       */
  __IM  uint32_t  RESERVED24;
  __IOM uint32_t  DOEPTSIZ1;                    /*!< (@ 0x00000330) device OUT endpoint-1 transfer size register               */
  __IM  uint32_t  RESERVED25[3];
  __IOM uint32_t  DOEPCTL2;                     /*!< (@ 0x00000340) device endpoint-2 control register                         */
  __IM  uint32_t  RESERVED26;
  __IOM uint32_t  DOEPINT2;                     /*!< (@ 0x00000348) device endpoint-2 interrupt register                       */
  __IM  uint32_t  RESERVED27;
  __IOM uint32_t  DOEPTSIZ2;                    /*!< (@ 0x00000350) device OUT endpoint-2 transfer size register               */
  __IM  uint32_t  RESERVED28[3];
  __IOM uint32_t  DOEPCTL3;                     /*!< (@ 0x00000360) device endpoint-3 control register                         */
  __IM  uint32_t  RESERVED29;
  __IOM uint32_t  DOEPINT3;                     /*!< (@ 0x00000368) device endpoint-3 interrupt register                       */
  __IM  uint32_t  RESERVED30;
  __IOM uint32_t  DOEPTSIZ3;                    /*!< (@ 0x00000370) device OUT endpoint-3 transfer size register               */
} OTG_FS_DEVICE_Type;                           /*!< Size = 884 (0x374)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x50000000) OTG_FS_GLOBAL Structure                                    */
  __IOM uint32_t  FS_GOTGCTL;                   /*!< (@ 0x00000000) OTG_FS control and status register (OTG_FS_GOTGCTL)        */
  __IOM uint32_t  FS_GOTGINT;                   /*!< (@ 0x00000004) OTG_FS interrupt register (OTG_FS_GOTGINT)                 */
  __IOM uint32_t  FS_GAHBCFG;                   /*!< (@ 0x00000008) OTG_FS AHB configuration register (OTG_FS_GAHBCFG)         */
  __IOM uint32_t  FS_GUSBCFG;                   /*!< (@ 0x0000000C) OTG_FS USB configuration register (OTG_FS_GUSBCFG)         */
  __IOM uint32_t  FS_GRSTCTL;                   /*!< (@ 0x00000010) OTG_FS reset register (OTG_FS_GRSTCTL)                     */
  __IOM uint32_t  FS_GINTSTS;                   /*!< (@ 0x00000014) OTG_FS core interrupt register (OTG_FS_GINTSTS)            */
  __IOM uint32_t  FS_GINTMSK;                   /*!< (@ 0x00000018) OTG_FS interrupt mask register (OTG_FS_GINTMSK)            */
  
  union {
    __IM  uint32_t FS_GRXSTSR_Device;           /*!< (@ 0x0000001C) OTG_FS Receive status debug read(Device mode)              */
    __IM  uint32_t FS_GRXSTSR_Host;             /*!< (@ 0x0000001C) OTG_FS Receive status debug read(Host mode)                */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FS_GRXFSIZ;                   /*!< (@ 0x00000024) OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)         */
  
  union {
    __IOM uint32_t FS_GNPTXFSIZ_Device;         /*!< (@ 0x00000028) OTG_FS non-periodic transmit FIFO size register
                                                                    (Device mode)                                              */
    __IOM uint32_t FS_GNPTXFSIZ_Host;           /*!< (@ 0x00000028) OTG_FS non-periodic transmit FIFO size register
                                                                    (Host mode)                                                */
  };
  __IM  uint32_t  FS_GNPTXSTS;                  /*!< (@ 0x0000002C) OTG_FS non-periodic transmit FIFO/queue status
                                                                    register (OTG_FS_GNPTXSTS)                                 */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  FS_GCCFG;                     /*!< (@ 0x00000038) OTG_FS general core configuration register (OTG_FS_GCCFG)  */
  __IOM uint32_t  FS_CID;                       /*!< (@ 0x0000003C) core ID register                                           */
  __IM  uint32_t  RESERVED2[48];
  __IOM uint32_t  FS_HPTXFSIZ;                  /*!< (@ 0x00000100) OTG_FS Host periodic transmit FIFO size register
                                                                    (OTG_FS_HPTXFSIZ)                                          */
  __IOM uint32_t  FS_DIEPTXF1;                  /*!< (@ 0x00000104) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF2)                                 */
  __IOM uint32_t  FS_DIEPTXF2;                  /*!< (@ 0x00000108) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF3)                                 */
  __IOM uint32_t  FS_DIEPTXF3;                  /*!< (@ 0x0000010C) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF4)                                 */
} OTG_FS_GLOBAL_Type;                           /*!< Size = 272 (0x110)                                                        */



/* =========================================================================================================================== */
/* ================                                        OTG_FS_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_HOST)
  */

typedef struct {                                /*!< (@ 0x50000400) OTG_FS_HOST Structure                                      */
  __IOM uint32_t  FS_HCFG;                      /*!< (@ 0x00000000) OTG_FS host configuration register (OTG_FS_HCFG)           */
  __IOM uint32_t  HFIR;                         /*!< (@ 0x00000004) OTG_FS Host frame interval register                        */
  __IM  uint32_t  FS_HFNUM;                     /*!< (@ 0x00000008) OTG_FS host frame number/frame time remaining
                                                                    register (OTG_FS_HFNUM)                                    */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FS_HPTXSTS;                   /*!< (@ 0x00000010) OTG_FS_Host periodic transmit FIFO/queue status
                                                                    register (OTG_FS_HPTXSTS)                                  */
  __IM  uint32_t  HAINT;                        /*!< (@ 0x00000014) OTG_FS Host all channels interrupt register                */
  __IOM uint32_t  HAINTMSK;                     /*!< (@ 0x00000018) OTG_FS host all channels interrupt mask register           */
  __IM  uint32_t  RESERVED1[9];
  __IOM uint32_t  FS_HPRT;                      /*!< (@ 0x00000040) OTG_FS host port control and status register
                                                                    (OTG_FS_HPRT)                                              */
  __IM  uint32_t  RESERVED2[47];
  __IOM uint32_t  FS_HCCHAR0;                   /*!< (@ 0x00000100) OTG_FS host channel-0 characteristics register
                                                                    (OTG_FS_HCCHAR0)                                           */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  FS_HCINT0;                    /*!< (@ 0x00000108) OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)   */
  __IOM uint32_t  FS_HCINTMSK0;                 /*!< (@ 0x0000010C) OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)     */
  __IOM uint32_t  FS_HCTSIZ0;                   /*!< (@ 0x00000110) OTG_FS host channel-0 transfer size register               */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  FS_HCCHAR1;                   /*!< (@ 0x00000120) OTG_FS host channel-1 characteristics register
                                                                    (OTG_FS_HCCHAR1)                                           */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  FS_HCINT1;                    /*!< (@ 0x00000128) OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)   */
  __IOM uint32_t  FS_HCINTMSK1;                 /*!< (@ 0x0000012C) OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)     */
  __IOM uint32_t  FS_HCTSIZ1;                   /*!< (@ 0x00000130) OTG_FS host channel-1 transfer size register               */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  FS_HCCHAR2;                   /*!< (@ 0x00000140) OTG_FS host channel-2 characteristics register
                                                                    (OTG_FS_HCCHAR2)                                           */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  FS_HCINT2;                    /*!< (@ 0x00000148) OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)   */
  __IOM uint32_t  FS_HCINTMSK2;                 /*!< (@ 0x0000014C) OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)     */
  __IOM uint32_t  FS_HCTSIZ2;                   /*!< (@ 0x00000150) OTG_FS host channel-2 transfer size register               */
  __IM  uint32_t  RESERVED8[3];
  __IOM uint32_t  FS_HCCHAR3;                   /*!< (@ 0x00000160) OTG_FS host channel-3 characteristics register
                                                                    (OTG_FS_HCCHAR3)                                           */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  FS_HCINT3;                    /*!< (@ 0x00000168) OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)   */
  __IOM uint32_t  FS_HCINTMSK3;                 /*!< (@ 0x0000016C) OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)     */
  __IOM uint32_t  FS_HCTSIZ3;                   /*!< (@ 0x00000170) OTG_FS host channel-3 transfer size register               */
  __IM  uint32_t  RESERVED10[3];
  __IOM uint32_t  FS_HCCHAR4;                   /*!< (@ 0x00000180) OTG_FS host channel-4 characteristics register
                                                                    (OTG_FS_HCCHAR4)                                           */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  FS_HCINT4;                    /*!< (@ 0x00000188) OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)   */
  __IOM uint32_t  FS_HCINTMSK4;                 /*!< (@ 0x0000018C) OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)     */
  __IOM uint32_t  FS_HCTSIZ4;                   /*!< (@ 0x00000190) OTG_FS host channel-x transfer size register               */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  FS_HCCHAR5;                   /*!< (@ 0x000001A0) OTG_FS host channel-5 characteristics register
                                                                    (OTG_FS_HCCHAR5)                                           */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  FS_HCINT5;                    /*!< (@ 0x000001A8) OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)   */
  __IOM uint32_t  FS_HCINTMSK5;                 /*!< (@ 0x000001AC) OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)     */
  __IOM uint32_t  FS_HCTSIZ5;                   /*!< (@ 0x000001B0) OTG_FS host channel-5 transfer size register               */
  __IM  uint32_t  RESERVED14[3];
  __IOM uint32_t  FS_HCCHAR6;                   /*!< (@ 0x000001C0) OTG_FS host channel-6 characteristics register
                                                                    (OTG_FS_HCCHAR6)                                           */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  FS_HCINT6;                    /*!< (@ 0x000001C8) OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)   */
  __IOM uint32_t  FS_HCINTMSK6;                 /*!< (@ 0x000001CC) OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)     */
  __IOM uint32_t  FS_HCTSIZ6;                   /*!< (@ 0x000001D0) OTG_FS host channel-6 transfer size register               */
  __IM  uint32_t  RESERVED16[3];
  __IOM uint32_t  FS_HCCHAR7;                   /*!< (@ 0x000001E0) OTG_FS host channel-7 characteristics register
                                                                    (OTG_FS_HCCHAR7)                                           */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  FS_HCINT7;                    /*!< (@ 0x000001E8) OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)   */
  __IOM uint32_t  FS_HCINTMSK7;                 /*!< (@ 0x000001EC) OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)     */
  __IOM uint32_t  FS_HCTSIZ7;                   /*!< (@ 0x000001F0) OTG_FS host channel-7 transfer size register               */
} OTG_FS_HOST_Type;                             /*!< Size = 500 (0x1f4)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x50000E00) OTG_FS_PWRCLK Structure                                    */
  __IOM uint32_t  FS_PCGCCTL;                   /*!< (@ 0x00000000) OTG_FS power and clock gating control register             */
} OTG_FS_PWRCLK_Type;                           /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                       ETHERNET_MMC                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: MAC management counters (ETHERNET_MMC)
  */

typedef struct {                                /*!< (@ 0x40028100) ETHERNET_MMC Structure                                     */
  __IOM uint32_t  MMCCR;                        /*!< (@ 0x00000000) Ethernet MMC control register (ETH_MMCCR)                  */
  __IOM uint32_t  MMCRIR;                       /*!< (@ 0x00000004) Ethernet MMC receive interrupt register (ETH_MMCRIR)       */
  __IOM uint32_t  MMCTIR;                       /*!< (@ 0x00000008) Ethernet MMC transmit interrupt register (ETH_MMCTIR)      */
  __IOM uint32_t  MMCRIMR;                      /*!< (@ 0x0000000C) Ethernet MMC receive interrupt mask register
                                                                    (ETH_MMCRIMR)                                              */
  __IOM uint32_t  MMCTIMR;                      /*!< (@ 0x00000010) Ethernet MMC transmit interrupt mask register
                                                                    (ETH_MMCTIMR)                                              */
  __IM  uint32_t  RESERVED[14];
  __IM  uint32_t  MMCTGFSCCR;                   /*!< (@ 0x0000004C) Ethernet MMC transmitted good frames after a
                                                                    single collision counter                                   */
  __IM  uint32_t  MMCTGFMSCCR;                  /*!< (@ 0x00000050) Ethernet MMC transmitted good frames after more
                                                                    than a single collision                                    */
  __IM  uint32_t  RESERVED1[5];
  __IM  uint32_t  MMCTGFCR;                     /*!< (@ 0x00000068) Ethernet MMC transmitted good frames counter
                                                                    register                                                   */
  __IM  uint32_t  RESERVED2[10];
  __IM  uint32_t  MMCRFCECR;                    /*!< (@ 0x00000094) Ethernet MMC received frames with CRC error counter
                                                                    register                                                   */
  __IM  uint32_t  MMCRFAECR;                    /*!< (@ 0x00000098) Ethernet MMC received frames with alignment error
                                                                    counter register                                           */
  __IM  uint32_t  RESERVED3[10];
  __IM  uint32_t  MMCRGUFCR;                    /*!< (@ 0x000000C4) MMC received good unicast frames counter register          */
} ETHERNET_MMC_Type;                            /*!< Size = 200 (0xc8)                                                         */



/* =========================================================================================================================== */
/* ================                                       ETHERNET_MAC                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: media access control (ETHERNET_MAC)
  */

typedef struct {                                /*!< (@ 0x40028000) ETHERNET_MAC Structure                                     */
  __IOM uint32_t  MACCR;                        /*!< (@ 0x00000000) Ethernet MAC configuration register (ETH_MACCR)            */
  __IOM uint32_t  MACFFR;                       /*!< (@ 0x00000004) Ethernet MAC frame filter register (ETH_MACCFFR)           */
  __IOM uint32_t  MACHTHR;                      /*!< (@ 0x00000008) Ethernet MAC hash table high register                      */
  __IOM uint32_t  MACHTLR;                      /*!< (@ 0x0000000C) Ethernet MAC hash table low register                       */
  __IOM uint32_t  MACMIIAR;                     /*!< (@ 0x00000010) Ethernet MAC MII address register (ETH_MACMIIAR)           */
  __IOM uint32_t  MACMIIDR;                     /*!< (@ 0x00000014) Ethernet MAC MII data register (ETH_MACMIIDR)              */
  __IOM uint32_t  MACFCR;                       /*!< (@ 0x00000018) Ethernet MAC flow control register (ETH_MACFCR)            */
  __IOM uint32_t  MACVLANTR;                    /*!< (@ 0x0000001C) Ethernet MAC VLAN tag register (ETH_MACVLANTR)             */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  MACRWUFFR;                    /*!< (@ 0x00000028) Ethernet MAC remote wakeup frame filter register
                                                                    (ETH_MACRWUFFR)                                            */
  __IOM uint32_t  MACPMTCSR;                    /*!< (@ 0x0000002C) Ethernet MAC PMT control and status register
                                                                    (ETH_MACPMTCSR)                                            */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  MACSR;                        /*!< (@ 0x00000038) Ethernet MAC interrupt status register (ETH_MACSR)         */
  __IOM uint32_t  MACIMR;                       /*!< (@ 0x0000003C) Ethernet MAC interrupt mask register (ETH_MACIMR)          */
  __IOM uint32_t  MACA0HR;                      /*!< (@ 0x00000040) Ethernet MAC address 0 high register (ETH_MACA0HR)         */
  __IOM uint32_t  MACA0LR;                      /*!< (@ 0x00000044) Ethernet MAC address 0 low register                        */
  __IOM uint32_t  MACA1HR;                      /*!< (@ 0x00000048) Ethernet MAC address 1 high register (ETH_MACA1HR)         */
  __IOM uint32_t  MACA1LR;                      /*!< (@ 0x0000004C) Ethernet MAC address1 low register                         */
  __IOM uint32_t  MACA2HR;                      /*!< (@ 0x00000050) Ethernet MAC address 2 high register (ETH_MACA2HR)         */
  __IOM uint32_t  MACA2LR;                      /*!< (@ 0x00000054) Ethernet MAC address 2 low register                        */
  __IOM uint32_t  MACA3HR;                      /*!< (@ 0x00000058) Ethernet MAC address 3 high register (ETH_MACA3HR)         */
  __IOM uint32_t  MACA3LR;                      /*!< (@ 0x0000005C) Ethernet MAC address 3 low register                        */
} ETHERNET_MAC_Type;                            /*!< Size = 96 (0x60)                                                          */



/* =========================================================================================================================== */
/* ================                                       ETHERNET_PTP                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: Precision time protocol (ETHERNET_PTP)
  */

typedef struct {                                /*!< (@ 0x40028700) ETHERNET_PTP Structure                                     */
  __IOM uint32_t  PTPTSCR;                      /*!< (@ 0x00000000) Ethernet PTP time stamp control register (ETH_PTPTSCR)     */
  __IOM uint32_t  PTPSSIR;                      /*!< (@ 0x00000004) Ethernet PTP subsecond increment register                  */
  __IM  uint32_t  PTPTSHR;                      /*!< (@ 0x00000008) Ethernet PTP time stamp high register                      */
  __IM  uint32_t  PTPTSLR;                      /*!< (@ 0x0000000C) Ethernet PTP time stamp low register (ETH_PTPTSLR)         */
  __IOM uint32_t  PTPTSHUR;                     /*!< (@ 0x00000010) Ethernet PTP time stamp high update register               */
  __IOM uint32_t  PTPTSLUR;                     /*!< (@ 0x00000014) Ethernet PTP time stamp low update register (ETH_PTPTSLUR) */
  __IOM uint32_t  PTPTSAR;                      /*!< (@ 0x00000018) Ethernet PTP time stamp addend register                    */
  __IOM uint32_t  PTPTTHR;                      /*!< (@ 0x0000001C) Ethernet PTP target time high register                     */
  __IOM uint32_t  PTPTTLR;                      /*!< (@ 0x00000020) Ethernet PTP target time low register                      */
} ETHERNET_PTP_Type;                            /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                       ETHERNET_DMA                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: DMA controller operation (ETHERNET_DMA)
  */

typedef struct {                                /*!< (@ 0x40029000) ETHERNET_DMA Structure                                     */
  __IOM uint32_t  DMABMR;                       /*!< (@ 0x00000000) Ethernet DMA bus mode register                             */
  __IOM uint32_t  DMATPDR;                      /*!< (@ 0x00000004) Ethernet DMA transmit poll demand register                 */
  __IOM uint32_t  DMARPDR;                      /*!< (@ 0x00000008) EHERNET DMA receive poll demand register                   */
  __IOM uint32_t  DMARDLAR;                     /*!< (@ 0x0000000C) Ethernet DMA receive descriptor list address
                                                                    register                                                   */
  __IOM uint32_t  DMATDLAR;                     /*!< (@ 0x00000010) Ethernet DMA transmit descriptor list address
                                                                    register                                                   */
  __IOM uint32_t  DMASR;                        /*!< (@ 0x00000014) Ethernet DMA status register                               */
  __IOM uint32_t  DMAOMR;                       /*!< (@ 0x00000018) Ethernet DMA operation mode register                       */
  __IOM uint32_t  DMAIER;                       /*!< (@ 0x0000001C) Ethernet DMA interrupt enable register                     */
  __IM  uint32_t  DMAMFBOCR;                    /*!< (@ 0x00000020) Ethernet DMA missed frame and buffer overflow
                                                                    counter register                                           */
  __IM  uint32_t  RESERVED[9];
  __IM  uint32_t  DMACHTDR;                     /*!< (@ 0x00000048) Ethernet DMA current host transmit descriptor
                                                                    register                                                   */
  __IM  uint32_t  DMACHRDR;                     /*!< (@ 0x0000004C) Ethernet DMA current host receive descriptor
                                                                    register                                                   */
  __IM  uint32_t  DMACHTBAR;                    /*!< (@ 0x00000050) Ethernet DMA current host transmit buffer address
                                                                    register                                                   */
  __IM  uint32_t  DMACHRBAR;                    /*!< (@ 0x00000054) Ethernet DMA current host receive buffer address
                                                                    register                                                   */
} ETHERNET_DMA_Type;                            /*!< Size = 88 (0x58)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define FSMC_BASE                   0xA0000000UL
#define PWR_BASE                    0x40007000UL
#define RCC_BASE                    0x40021000UL
#define GPIOA_BASE                  0x40010800UL
#define GPIOB_BASE                  0x40010C00UL
#define GPIOC_BASE                  0x40011000UL
#define GPIOD_BASE                  0x40011400UL
#define GPIOE_BASE                  0x40011800UL
#define GPIOF_BASE                  0x40011C00UL
#define GPIOG_BASE                  0x40012000UL
#define AFIO_BASE                   0x40010000UL
#define EXTI_BASE                   0x40010400UL
#define DMA1_BASE                   0x40020000UL
#define DMA2_BASE                   0x40020400UL
#define SDIO_BASE                   0x40018000UL
#define RTC_BASE                    0x40002800UL
#define BKP_BASE                    0x40006C00UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define TIM1_BASE                   0x40012C00UL
#define TIM8_BASE                   0x40013400UL
#define TIM2_BASE                   0x40000000UL
#define TIM3_BASE                   0x40000400UL
#define TIM4_BASE                   0x40000800UL
#define TIM5_BASE                   0x40000C00UL
#define TIM9_BASE                   0x40014C00UL
#define TIM12_BASE                  0x40001800UL
#define TIM10_BASE                  0x40015000UL
#define TIM11_BASE                  0x40015400UL
#define TIM13_BASE                  0x40001C00UL
#define TIM14_BASE                  0x40002000UL
#define TIM6_BASE                   0x40001000UL
#define TIM7_BASE                   0x40001400UL
#define I2C1_BASE                   0x40005400UL
#define I2C2_BASE                   0x40005800UL
#define SPI1_BASE                   0x40013000UL
#define SPI2_BASE                   0x40003800UL
#define SPI3_BASE                   0x40003C00UL
#define USART1_BASE                 0x40013800UL
#define USART2_BASE                 0x40004400UL
#define USART3_BASE                 0x40004800UL
#define ADC1_BASE                   0x40012400UL
#define ADC2_BASE                   0x40012800UL
#define ADC3_BASE                   0x40013C00UL
#define CAN1_BASE                   0x40006400UL
#define CAN2_BASE                   0x40006800UL
#define DAC_BASE                    0x40007400UL
#define DBG_BASE                    0xE0042000UL
#define UART4_BASE                  0x40004C00UL
#define UART5_BASE                  0x40005000UL
#define CRC_BASE                    0x40023000UL
#define FLASH_BASE                  0x40022000UL
#define NVIC_BASE                   0xE000E000UL
#define USB_BASE                    0x40005C00UL
#define OTG_FS_DEVICE_BASE          0x50000800UL
#define OTG_FS_GLOBAL_BASE          0x50000000UL
#define OTG_FS_HOST_BASE            0x50000400UL
#define OTG_FS_PWRCLK_BASE          0x50000E00UL
#define ETHERNET_MMC_BASE           0x40028100UL
#define ETHERNET_MAC_BASE           0x40028000UL
#define ETHERNET_PTP_BASE           0x40028700UL
#define ETHERNET_DMA_BASE           0x40029000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define FSMC                        ((FSMC_Type*)              FSMC_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define GPIOB                       ((GPIOA_Type*)             GPIOB_BASE)
#define GPIOC                       ((GPIOA_Type*)             GPIOC_BASE)
#define GPIOD                       ((GPIOA_Type*)             GPIOD_BASE)
#define GPIOE                       ((GPIOA_Type*)             GPIOE_BASE)
#define GPIOF                       ((GPIOA_Type*)             GPIOF_BASE)
#define GPIOG                       ((GPIOA_Type*)             GPIOG_BASE)
#define AFIO                        ((AFIO_Type*)              AFIO_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define DMA1                        ((DMA1_Type*)              DMA1_BASE)
#define DMA2                        ((DMA1_Type*)              DMA2_BASE)
#define SDIO                        ((SDIO_Type*)              SDIO_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define BKP                         ((BKP_Type*)               BKP_BASE)
#define IWDG                        ((IWDG_Type*)              IWDG_BASE)
#define WWDG                        ((WWDG_Type*)              WWDG_BASE)
#define TIM1                        ((TIM1_Type*)              TIM1_BASE)
#define TIM8                        ((TIM1_Type*)              TIM8_BASE)
#define TIM2                        ((TIM2_Type*)              TIM2_BASE)
#define TIM3                        ((TIM2_Type*)              TIM3_BASE)
#define TIM4                        ((TIM2_Type*)              TIM4_BASE)
#define TIM5                        ((TIM2_Type*)              TIM5_BASE)
#define TIM9                        ((TIM9_Type*)              TIM9_BASE)
#define TIM12                       ((TIM9_Type*)              TIM12_BASE)
#define TIM10                       ((TIM10_Type*)             TIM10_BASE)
#define TIM11                       ((TIM10_Type*)             TIM11_BASE)
#define TIM13                       ((TIM10_Type*)             TIM13_BASE)
#define TIM14                       ((TIM10_Type*)             TIM14_BASE)
#define TIM6                        ((TIM6_Type*)              TIM6_BASE)
#define TIM7                        ((TIM6_Type*)              TIM7_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C1_Type*)              I2C2_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define SPI3                        ((SPI1_Type*)              SPI3_BASE)
#define USART1                      ((USART1_Type*)            USART1_BASE)
#define USART2                      ((USART1_Type*)            USART2_BASE)
#define USART3                      ((USART1_Type*)            USART3_BASE)
#define ADC1                        ((ADC1_Type*)              ADC1_BASE)
#define ADC2                        ((ADC2_Type*)              ADC2_BASE)
#define ADC3                        ((ADC2_Type*)              ADC3_BASE)
#define CAN1                        ((CAN1_Type*)              CAN1_BASE)
#define CAN2                        ((CAN1_Type*)              CAN2_BASE)
#define DAC                         ((DAC_Type*)               DAC_BASE)
#define DBG                         ((DBG_Type*)               DBG_BASE)
#define UART4                       ((UART4_Type*)             UART4_BASE)
#define UART5                       ((UART5_Type*)             UART5_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define FLASH                       ((FLASH_Type*)             FLASH_BASE)
#define NVIC                        ((NVIC_Type*)              NVIC_BASE)
#define USB                         ((USB_Type*)               USB_BASE)
#define OTG_FS_DEVICE               ((OTG_FS_DEVICE_Type*)     OTG_FS_DEVICE_BASE)
#define OTG_FS_GLOBAL               ((OTG_FS_GLOBAL_Type*)     OTG_FS_GLOBAL_BASE)
#define OTG_FS_HOST                 ((OTG_FS_HOST_Type*)       OTG_FS_HOST_BASE)
#define OTG_FS_PWRCLK               ((OTG_FS_PWRCLK_Type*)     OTG_FS_PWRCLK_BASE)
#define ETHERNET_MMC                ((ETHERNET_MMC_Type*)      ETHERNET_MMC_BASE)
#define ETHERNET_MAC                ((ETHERNET_MAC_Type*)      ETHERNET_MAC_BASE)
#define ETHERNET_PTP                ((ETHERNET_PTP_Type*)      ETHERNET_PTP_BASE)
#define ETHERNET_DMA                ((ETHERNET_DMA_Type*)      ETHERNET_DMA_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* STM32F103_H */


/** @} */ /* End of group STM32F103 */

/** @} */ /* End of group  */
